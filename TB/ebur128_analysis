// Copyright 2015 , tb-software.com
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of tb-software.com may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// EBUR128 Loudness Measurement
// by TBProAudio 2015 (www.tb-software.com)

// Changelog
// 1.0: First public release
// 1.1: Changed of usage of Memory Manager, Write automation data
// 1.2: Added TimerClass to controll update of display and automation data more precisely
// 1.3: Rearrangement of includes
// 1.4: Increased precision, Multichannel Support, reduced number of ext libraries
// 1.5: Improved TP Measurement
// 1.6: Added srate
// 1.7: TP Measurement based on ITU 1770
// 1.8: Synced Measurement
// 1.9: Small fixes

desc:EBUR128 Loudness Measurement V1.9 (TBProAudio)
import memorymanager.jsfx-inc
import ebur128.jsfx-inc

//////////////////////////////////////
// Hidden Slider to provide Automation data
slider1:-144<-60,0,0.1>-_OUT: ML Disp
slider2:-144<-60,0,0.1>-_OUT: ML Max Disp
slider3:-144<-60,0,0.1>-_OUT: SL Disp
slider4:-144<-60,0,0.1>-_OUT: SL Max Disp
slider5:-144<-60,0,0.1>-_OUT: IL Disp
slider6:-144<-60,6,0.1>-_OUT: TP Disp
slider7:0<0,60,0.1>-_OUT: LRA Disp
////////////////////////////////////////

slider9:0<0,3,{2.0 Stereo,4.0 Surround,4.1 Surround,5.1 Surround>Channel Config
slider10:-144<-60,6,0.1>IL LUFS
slider20:-144<-60,6,0.1>ML LUFS
slider21:-144<-60,6,0.1>ML Max LUFS
slider30:-144<-60,6,0.1>SL LUFS
slider31:-144<-60,6,0.1>SL Max LUFS
slider50:-144<-60,6,0.1>TP dB
slider60:0<0,60,0.1>LRA LU
slider61:1<0,1,1{Off,On}>Synced

@init
  // Init our small mem manager, just to manage our own memory and align to foreign code/mem
  MM.MemMgr_Init(0);

  // EO@function

  EBUR128LM.LM_EBUR128_Init_MultiCh(srate);
  timer.EBU_Time_Init_Ms(100, srate);

  slider1 = slider20;
  slider2 = slider21;
  slider3 = slider30;
  slider4 = slider31;
  slider5 = slider10;
  slider6 = slider50;
  slider7 = slider60;
    
  slider_automate(slider1);
  slider_automate(slider2);
  slider_automate(slider3);
  slider_automate(slider4);
  slider_automate(slider5);
  slider_automate(slider6);
  slider_automate(slider7);

// EO@init

@slider
// EO@slider 

@block
// EO@block
 
@sample
do_measure = 0;
  (slider61 == 0) ?
  (
    do_measure = 1;
  ):
  (
    (play_state == 1) ? 
      do_measure = 1;  
  );


  (do_measure) ? 
  (
    EBUR128LM.LM_EBUR128_Process_MultiCh(spl0, spl1, spl2, spl3, spl4, spl5, slider9);
    
    (timer.EBU_Time_Count()) ?
    (
      slider20 = EBUR128LM.LM_EBUR128_GetML_LUFS();
      slider21 = EBUR128LM.LM_EBUR128_GetMLMax_LUFS();
  
      slider30 = EBUR128LM.LM_EBUR128_GetSL_LUFS();
      slider31 = EBUR128LM.LM_EBUR128_GetSLMax_LUFS();
  
      slider10 = EBUR128LM.LM_EBUR128_GetIL_LUFS();
  
      slider50 = EBUR128LM.LM_EBUR128_GetTP_dbFS();
  
      slider60 = EBUR128LM.LM_EBUR128_GetRLA_LU();
  
      slider1 = slider20;
      slider2 = slider21;
      slider3 = slider30;
      slider4 = slider31;
      slider5 = slider10;
      slider6 = slider50;
      slider7 = slider60;
      
      slider_automate(slider1);
      slider_automate(slider2);
      slider_automate(slider3);
      slider_automate(slider4);
      slider_automate(slider5);
      slider_automate(slider6);
      slider_automate(slider7);    
    )
  );
// EO@sample

@gfx 400 50
  gfx_r = 0.0;
  gfx_g = 1.0;
  gfx_b = 0.0;
  gfx_a = 1.0;
  
  // Reset
  resetx = 200;
  reset_posY = 10;
    
  gfx_x = resetx;
  gfx_y = reset_posY;
  gfx_drawchar($'R');
  gfx_drawchar($'E');
  gfx_drawchar($'S');
  gfx_drawchar($'E');
  gfx_drawchar($'T');
  resetx2 = gfx_x;
  
  doreset = 0;
  mouse_cap ?
  (
    mouse_x >= resetx && 
    mouse_x <= resetx2 && 
    mouse_y >= reset_posY && 
    mouse_y <= reset_posY+gfx_texth 
    ? doreset = 1;
  );
  
  doreset ?
  (
    
    EBUR128LM.LM_EBUR128_Reset_MultiCh();
    
    slider20 = EBUR128LM.LM_EBUR128_GetML_LUFS();
    slider21 = EBUR128LM.LM_EBUR128_GetMLMax_LUFS();

    slider30 = EBUR128LM.LM_EBUR128_GetSL_LUFS();
    slider31 = EBUR128LM.LM_EBUR128_GetSLMax_LUFS();

    slider10 = EBUR128LM.LM_EBUR128_GetIL_LUFS();

    slider50 = EBUR128LM.LM_EBUR128_GetTP_dbFS();
    
    slider60 = EBUR128LM.LM_EBUR128_GetRLA_LU();
    
    slider1 = slider20;
    slider2 = slider21;
    slider3 = slider30;
    slider4 = slider31;
    slider5 = slider10;
    slider6 = slider50;
    slider7 = slider60;
    
    slider_automate(slider1);
    slider_automate(slider2);
    slider_automate(slider3);
    slider_automate(slider4);
    slider_automate(slider5);
    slider_automate(slider6);
    slider_automate(slider7);
  );
// EOL@GFX
